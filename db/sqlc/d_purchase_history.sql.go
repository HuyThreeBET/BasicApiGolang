// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: d_purchase_history.sql

package sqlc

import (
	"context"
)

const createPuschaseHistory = `-- name: CreatePuschaseHistory :one
INSERT INTO purchase_history (
  id_product, buyer, card_number
) VALUES (
  $1, $2, $3
) RETURNING id_purchase_history, id_product, buyer, card_number, created_at, update_at
`

type CreatePuschaseHistoryParams struct {
	IDProduct  int32  `json:"id_product"`
	Buyer      string `json:"buyer"`
	CardNumber string `json:"card_number"`
}

func (q *Queries) CreatePuschaseHistory(ctx context.Context, arg CreatePuschaseHistoryParams) (PurchaseHistory, error) {
	row := q.db.QueryRowContext(ctx, createPuschaseHistory, arg.IDProduct, arg.Buyer, arg.CardNumber)
	var i PurchaseHistory
	err := row.Scan(
		&i.IDPurchaseHistory,
		&i.IDProduct,
		&i.Buyer,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getPurchaseHistory = `-- name: GetPurchaseHistory :one
SELECT id_purchase_history, id_product, buyer, card_number, created_at, update_at FROM purchase_history
WHERE id_purchase_history = $1
`

func (q *Queries) GetPurchaseHistory(ctx context.Context, idPurchaseHistory int32) (PurchaseHistory, error) {
	row := q.db.QueryRowContext(ctx, getPurchaseHistory, idPurchaseHistory)
	var i PurchaseHistory
	err := row.Scan(
		&i.IDPurchaseHistory,
		&i.IDProduct,
		&i.Buyer,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const listPuschaseHistories = `-- name: ListPuschaseHistories :many
SELECT id_purchase_history, id_product, buyer, card_number, created_at, update_at FROM purchase_history
ORDER BY created_at
`

func (q *Queries) ListPuschaseHistories(ctx context.Context) ([]PurchaseHistory, error) {
	rows, err := q.db.QueryContext(ctx, listPuschaseHistories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PurchaseHistory{}
	for rows.Next() {
		var i PurchaseHistory
		if err := rows.Scan(
			&i.IDPurchaseHistory,
			&i.IDProduct,
			&i.Buyer,
			&i.CardNumber,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
